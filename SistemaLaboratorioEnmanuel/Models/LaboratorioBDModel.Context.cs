//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SistemaLaboratorioEnmanuel.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LaboratorioBDEntities : DbContext
    {
        public LaboratorioBDEntities()
            : base("name=LaboratorioBDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Abono> Abono { get; set; }
        public virtual DbSet<Area> Area { get; set; }
        public virtual DbSet<Doctor> Doctor { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<Examen> Examen { get; set; }
        public virtual DbSet<Orden> Orden { get; set; }
        public virtual DbSet<Paciente> Paciente { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<Resultado> Resultado { get; set; }
        public virtual DbSet<Salida> Salida { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Telefono> Telefono { get; set; }
        public virtual DbSet<DetalleEntrada> DetalleEntrada { get; set; }
        public virtual DbSet<Insumos> Insumos { get; set; }
        public virtual DbSet<Perfil> Perfil { get; set; }
        public virtual DbSet<PerfilExamen> PerfilExamen { get; set; }
        public virtual DbSet<DetalleFactura> DetalleFactura { get; set; }
        public virtual DbSet<DetalleOrden> DetalleOrden { get; set; }
        public virtual DbSet<Factura> Factura { get; set; }
        public virtual DbSet<Empresa> Empresas { get; set; }
    
        public virtual ObjectResult<ProcDatosOrden_Result> ProcDatosOrden()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcDatosOrden_Result>("ProcDatosOrden");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<sp_DetalleFacturaAbonos_Result> sp_DetalleFacturaAbonos(Nullable<int> idFact)
        {
            var idFactParameter = idFact.HasValue ?
                new ObjectParameter("idFact", idFact) :
                new ObjectParameter("idFact", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DetalleFacturaAbonos_Result>("sp_DetalleFacturaAbonos", idFactParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_edad(Nullable<System.DateTime> fecha_nac)
        {
            var fecha_nacParameter = fecha_nac.HasValue ?
                new ObjectParameter("fecha_nac", fecha_nac) :
                new ObjectParameter("fecha_nac", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_edad", fecha_nacParameter);
        }
    
        public virtual ObjectResult<sp_Edad_fechaNac_Result> sp_Edad_fechaNac(string cedula)
        {
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Edad_fechaNac_Result>("sp_Edad_fechaNac", cedulaParameter);
        }
    
        public virtual ObjectResult<sp_ExamenDetalleOrdenes_Result> sp_ExamenDetalleOrdenes(Nullable<int> idOrdenExamen)
        {
            var idOrdenExamenParameter = idOrdenExamen.HasValue ?
                new ObjectParameter("idOrdenExamen", idOrdenExamen) :
                new ObjectParameter("idOrdenExamen", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ExamenDetalleOrdenes_Result>("sp_ExamenDetalleOrdenes", idOrdenExamenParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_ListaDoctores_Result> SP_ListaDoctores()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ListaDoctores_Result>("SP_ListaDoctores");
        }
    
        public virtual ObjectResult<SP_ListaPacientes_Result> SP_ListaPacientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ListaPacientes_Result>("SP_ListaPacientes");
        }
    
        public virtual ObjectResult<SP_ProcDatosOrden_Result> SP_ProcDatosOrden()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProcDatosOrden_Result>("SP_ProcDatosOrden");
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SP_ListaExamenes_Result> SP_ListaExamenes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ListaExamenes_Result>("SP_ListaExamenes");
        }
    
        public virtual ObjectResult<sp_Insumos_Result> sp_Insumos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Insumos_Result>("sp_Insumos");
        }
    
        public virtual ObjectResult<sp_TodasFacturacionesAbonarresultado_Result> sp_TodasFacturacionesAbonarresultado()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TodasFacturacionesAbonarresultado_Result>("sp_TodasFacturacionesAbonarresultado");
        }
    
        public virtual ObjectResult<sp_DetalleFacturaExamenes_Result> sp_DetalleFacturaExamenes(Nullable<int> idFact)
        {
            var idFactParameter = idFact.HasValue ?
                new ObjectParameter("idFact", idFact) :
                new ObjectParameter("idFact", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_DetalleFacturaExamenes_Result>("sp_DetalleFacturaExamenes", idFactParameter);
        }
    }
}
